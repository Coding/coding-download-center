# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # TODO hard code, because GitHub Actions only support secrets but not env
    env:
      CODING_GENERIC_REGISTRY: https://coding-public-generic.pkg.coding.net/public/downloads/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache Downloads
        id: cache-downloads
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/bin/shellcheck
            /usr/local/bin/shfmt
          key: ${{ runner.os }}-shellcheck-shfmt

      - name: Prepare
        if: steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.cache/downloads
          wget https://github.com/mvdan/sh/releases/download/v3.3.1/shfmt_v3.3.1_linux_amd64 -O ~/.cache/downloads/shfmt
          chmod +x ~/.cache/downloads/shfmt
          sudo cp ~/.cache/downloads/shfmt /usr/local/bin/shfmt
          wget https://github.com/koalaman/shellcheck/releases/download/v0.7.2/shellcheck-v0.7.2.linux.x86_64.tar.xz -P ~/.cache/downloads/
          tar -C ~/.cache/downloads/ --strip-components=1 -Jxvf ~/.cache/downloads/shellcheck-v0.7.2.linux.x86_64.tar.xz shellcheck-v0.7.2/shellcheck
          sudo cp ~/.cache/downloads/shellcheck /usr/local/bin/shellcheck

      - name: Lint
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git diff --diff-filter=d --name-only origin/$GITHUB_BASE_REF... | xargs ./lint.sh

      # Download and check sha256, if file not exist in registry
      - name: Download and check
        run: ./coding-generic-sync.sh

